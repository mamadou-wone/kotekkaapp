package com.kotekka.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DeviceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceAllPropertiesEquals(Device expected, Device actual) {
        assertDeviceAutoGeneratedPropertiesEquals(expected, actual);
        assertDeviceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceAllUpdatablePropertiesEquals(Device expected, Device actual) {
        assertDeviceUpdatableFieldsEquals(expected, actual);
        assertDeviceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceAutoGeneratedPropertiesEquals(Device expected, Device actual) {
        assertThat(expected)
            .as("Verify Device auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceUpdatableFieldsEquals(Device expected, Device actual) {
        assertThat(expected)
            .as("Verify Device relevant properties")
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getDeviceUuid()).as("check deviceUuid").isEqualTo(actual.getDeviceUuid()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getManufacturer()).as("check manufacturer").isEqualTo(actual.getManufacturer()))
            .satisfies(e -> assertThat(e.getModel()).as("check model").isEqualTo(actual.getModel()))
            .satisfies(e -> assertThat(e.getOs()).as("check os").isEqualTo(actual.getOs()))
            .satisfies(e -> assertThat(e.getAppVersion()).as("check appVersion").isEqualTo(actual.getAppVersion()))
            .satisfies(e -> assertThat(e.getInactive()).as("check inactive").isEqualTo(actual.getInactive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceUpdatableRelationshipsEquals(Device expected, Device actual) {
        // empty method
    }
}
