package com.kotekka.app.domain;

import static com.kotekka.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relevant properties")
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getWalletHolder()).as("check walletHolder").isEqualTo(actual.getWalletHolder()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getMedia()).as("check media").isEqualTo(actual.getMedia()))
            .satisfies(e -> assertThat(e.getMediaContentType()).as("check media contenty type").isEqualTo(actual.getMediaContentType()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e ->
                assertThat(e.getCompareAtPrice())
                    .as("check compareAtPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getCompareAtPrice())
            )
            .satisfies(e ->
                assertThat(e.getCostPerItem())
                    .as("check costPerItem")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getCostPerItem())
            )
            .satisfies(e -> assertThat(e.getProfit()).as("check profit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getProfit()))
            .satisfies(e -> assertThat(e.getMargin()).as("check margin").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getMargin()))
            .satisfies(e -> assertThat(e.getInventoryQuantity()).as("check inventoryQuantity").isEqualTo(actual.getInventoryQuantity()))
            .satisfies(e -> assertThat(e.getInventoryLocation()).as("check inventoryLocation").isEqualTo(actual.getInventoryLocation()))
            .satisfies(e -> assertThat(e.getTrackQuantity()).as("check trackQuantity").isEqualTo(actual.getTrackQuantity()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relationships")
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getCollections()).as("check collections").isEqualTo(actual.getCollections()));
    }
}
