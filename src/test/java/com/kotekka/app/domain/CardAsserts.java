package com.kotekka.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CardAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardAllPropertiesEquals(Card expected, Card actual) {
        assertCardAutoGeneratedPropertiesEquals(expected, actual);
        assertCardAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardAllUpdatablePropertiesEquals(Card expected, Card actual) {
        assertCardUpdatableFieldsEquals(expected, actual);
        assertCardUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardAutoGeneratedPropertiesEquals(Card expected, Card actual) {
        assertThat(expected)
            .as("Verify Card auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardUpdatableFieldsEquals(Card expected, Card actual) {
        assertThat(expected)
            .as("Verify Card relevant properties")
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getMaskedPan()).as("check maskedPan").isEqualTo(actual.getMaskedPan()))
            .satisfies(e -> assertThat(e.getCardHolderName()).as("check cardHolderName").isEqualTo(actual.getCardHolderName()))
            .satisfies(e -> assertThat(e.getToken()).as("check token").isEqualTo(actual.getToken()))
            .satisfies(e -> assertThat(e.getExpiryYear()).as("check expiryYear").isEqualTo(actual.getExpiryYear()))
            .satisfies(e -> assertThat(e.getExpiryMonth()).as("check expiryMonth").isEqualTo(actual.getExpiryMonth()))
            .satisfies(e -> assertThat(e.getRnd()).as("check rnd").isEqualTo(actual.getRnd()))
            .satisfies(e -> assertThat(e.getHash()).as("check hash").isEqualTo(actual.getHash()))
            .satisfies(e -> assertThat(e.getWalletHolder()).as("check walletHolder").isEqualTo(actual.getWalletHolder()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCardUpdatableRelationshipsEquals(Card expected, Card actual) {
        // empty method
    }
}
