package com.kotekka.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OneTimePasswordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneTimePasswordAllPropertiesEquals(OneTimePassword expected, OneTimePassword actual) {
        assertOneTimePasswordAutoGeneratedPropertiesEquals(expected, actual);
        assertOneTimePasswordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneTimePasswordAllUpdatablePropertiesEquals(OneTimePassword expected, OneTimePassword actual) {
        assertOneTimePasswordUpdatableFieldsEquals(expected, actual);
        assertOneTimePasswordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneTimePasswordAutoGeneratedPropertiesEquals(OneTimePassword expected, OneTimePassword actual) {
        assertThat(expected)
            .as("Verify OneTimePassword auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneTimePasswordUpdatableFieldsEquals(OneTimePassword expected, OneTimePassword actual) {
        assertThat(expected)
            .as("Verify OneTimePassword relevant properties")
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getExpiry()).as("check expiry").isEqualTo(actual.getExpiry()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneTimePasswordUpdatableRelationshipsEquals(OneTimePassword expected, OneTimePassword actual) {
        // empty method
    }
}
