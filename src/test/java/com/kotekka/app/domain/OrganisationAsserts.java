package com.kotekka.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OrganisationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationAllPropertiesEquals(Organisation expected, Organisation actual) {
        assertOrganisationAutoGeneratedPropertiesEquals(expected, actual);
        assertOrganisationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationAllUpdatablePropertiesEquals(Organisation expected, Organisation actual) {
        assertOrganisationUpdatableFieldsEquals(expected, actual);
        assertOrganisationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationAutoGeneratedPropertiesEquals(Organisation expected, Organisation actual) {
        assertThat(expected)
            .as("Verify Organisation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationUpdatableFieldsEquals(Organisation expected, Organisation actual) {
        assertThat(expected)
            .as("Verify Organisation relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getHeadcount()).as("check headcount").isEqualTo(actual.getHeadcount()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationUpdatableRelationshipsEquals(Organisation expected, Organisation actual) {
        // empty method
    }
}
