package com.kotekka.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PartnerCallAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartnerCallAllPropertiesEquals(PartnerCall expected, PartnerCall actual) {
        assertPartnerCallAutoGeneratedPropertiesEquals(expected, actual);
        assertPartnerCallAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartnerCallAllUpdatablePropertiesEquals(PartnerCall expected, PartnerCall actual) {
        assertPartnerCallUpdatableFieldsEquals(expected, actual);
        assertPartnerCallUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartnerCallAutoGeneratedPropertiesEquals(PartnerCall expected, PartnerCall actual) {
        assertThat(expected)
            .as("Verify PartnerCall auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartnerCallUpdatableFieldsEquals(PartnerCall expected, PartnerCall actual) {
        assertThat(expected)
            .as("Verify PartnerCall relevant properties")
            .satisfies(e -> assertThat(e.getPartner()).as("check partner").isEqualTo(actual.getPartner()))
            .satisfies(e -> assertThat(e.getApi()).as("check api").isEqualTo(actual.getApi()))
            .satisfies(e -> assertThat(e.getMethod()).as("check method").isEqualTo(actual.getMethod()))
            .satisfies(e -> assertThat(e.getRequestHeaders()).as("check requestHeaders").isEqualTo(actual.getRequestHeaders()))
            .satisfies(e -> assertThat(e.getRequestBody()).as("check requestBody").isEqualTo(actual.getRequestBody()))
            .satisfies(e -> assertThat(e.getRequestTime()).as("check requestTime").isEqualTo(actual.getRequestTime()))
            .satisfies(e -> assertThat(e.getResponseStatusCode()).as("check responseStatusCode").isEqualTo(actual.getResponseStatusCode()))
            .satisfies(e -> assertThat(e.getResponseHeaders()).as("check responseHeaders").isEqualTo(actual.getResponseHeaders()))
            .satisfies(e -> assertThat(e.getResponseBody()).as("check responseBody").isEqualTo(actual.getResponseBody()))
            .satisfies(e -> assertThat(e.getResponseTime()).as("check responseTime").isEqualTo(actual.getResponseTime()))
            .satisfies(e -> assertThat(e.getCorrelationId()).as("check correlationId").isEqualTo(actual.getCorrelationId()))
            .satisfies(e -> assertThat(e.getQueryParam()).as("check queryParam").isEqualTo(actual.getQueryParam()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartnerCallUpdatableRelationshipsEquals(PartnerCall expected, PartnerCall actual) {
        // empty method
    }
}
