package com.kotekka.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CacheInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCacheInfoAllPropertiesEquals(CacheInfo expected, CacheInfo actual) {
        assertCacheInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertCacheInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCacheInfoAllUpdatablePropertiesEquals(CacheInfo expected, CacheInfo actual) {
        assertCacheInfoUpdatableFieldsEquals(expected, actual);
        assertCacheInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCacheInfoAutoGeneratedPropertiesEquals(CacheInfo expected, CacheInfo actual) {
        assertThat(expected)
            .as("Verify CacheInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCacheInfoUpdatableFieldsEquals(CacheInfo expected, CacheInfo actual) {
        assertThat(expected)
            .as("Verify CacheInfo relevant properties")
            .satisfies(e -> assertThat(e.getWalletHolder()).as("check walletHolder").isEqualTo(actual.getWalletHolder()))
            .satisfies(e -> assertThat(e.getKey()).as("check key").isEqualTo(actual.getKey()))
            .satisfies(e -> assertThat(e.getValue()).as("check value").isEqualTo(actual.getValue()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCacheInfoUpdatableRelationshipsEquals(CacheInfo expected, CacheInfo actual) {
        // empty method
    }
}
