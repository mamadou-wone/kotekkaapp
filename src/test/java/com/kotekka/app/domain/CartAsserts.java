package com.kotekka.app.domain;

import static com.kotekka.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CartAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartAllPropertiesEquals(Cart expected, Cart actual) {
        assertCartAutoGeneratedPropertiesEquals(expected, actual);
        assertCartAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartAllUpdatablePropertiesEquals(Cart expected, Cart actual) {
        assertCartUpdatableFieldsEquals(expected, actual);
        assertCartUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartAutoGeneratedPropertiesEquals(Cart expected, Cart actual) {
        assertThat(expected)
            .as("Verify Cart auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartUpdatableFieldsEquals(Cart expected, Cart actual) {
        assertThat(expected)
            .as("Verify Cart relevant properties")
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getWalletHolder()).as("check walletHolder").isEqualTo(actual.getWalletHolder()))
            .satisfies(e -> assertThat(e.getTotalQuantity()).as("check totalQuantity").isEqualTo(actual.getTotalQuantity()))
            .satisfies(e ->
                assertThat(e.getTotalPrice()).as("check totalPrice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTotalPrice())
            )
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCartUpdatableRelationshipsEquals(Cart expected, Cart actual) {
        // empty method
    }
}
