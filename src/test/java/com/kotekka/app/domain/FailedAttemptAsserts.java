package com.kotekka.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FailedAttemptAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailedAttemptAllPropertiesEquals(FailedAttempt expected, FailedAttempt actual) {
        assertFailedAttemptAutoGeneratedPropertiesEquals(expected, actual);
        assertFailedAttemptAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailedAttemptAllUpdatablePropertiesEquals(FailedAttempt expected, FailedAttempt actual) {
        assertFailedAttemptUpdatableFieldsEquals(expected, actual);
        assertFailedAttemptUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailedAttemptAutoGeneratedPropertiesEquals(FailedAttempt expected, FailedAttempt actual) {
        assertThat(expected)
            .as("Verify FailedAttempt auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailedAttemptUpdatableFieldsEquals(FailedAttempt expected, FailedAttempt actual) {
        assertThat(expected)
            .as("Verify FailedAttempt relevant properties")
            .satisfies(e -> assertThat(e.getLogin()).as("check login").isEqualTo(actual.getLogin()))
            .satisfies(e -> assertThat(e.getIpAddress()).as("check ipAddress").isEqualTo(actual.getIpAddress()))
            .satisfies(e -> assertThat(e.getIsAfterLock()).as("check isAfterLock").isEqualTo(actual.getIsAfterLock()))
            .satisfies(e -> assertThat(e.getApp()).as("check app").isEqualTo(actual.getApp()))
            .satisfies(e -> assertThat(e.getAction()).as("check action").isEqualTo(actual.getAction()))
            .satisfies(e -> assertThat(e.getDevice()).as("check device").isEqualTo(actual.getDevice()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getReason()).as("check reason").isEqualTo(actual.getReason()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailedAttemptUpdatableRelationshipsEquals(FailedAttempt expected, FailedAttempt actual) {
        // empty method
    }
}
