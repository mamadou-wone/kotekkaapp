package com.kotekka.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ServiceClientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceClientAllPropertiesEquals(ServiceClient expected, ServiceClient actual) {
        assertServiceClientAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceClientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceClientAllUpdatablePropertiesEquals(ServiceClient expected, ServiceClient actual) {
        assertServiceClientUpdatableFieldsEquals(expected, actual);
        assertServiceClientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceClientAutoGeneratedPropertiesEquals(ServiceClient expected, ServiceClient actual) {
        assertThat(expected)
            .as("Verify ServiceClient auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceClientUpdatableFieldsEquals(ServiceClient expected, ServiceClient actual) {
        assertThat(expected)
            .as("Verify ServiceClient relevant properties")
            .satisfies(e -> assertThat(e.getClientId()).as("check clientId").isEqualTo(actual.getClientId()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getApiKey()).as("check apiKey").isEqualTo(actual.getApiKey()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceClientUpdatableRelationshipsEquals(ServiceClient expected, ServiceClient actual) {
        // empty method
    }
}
